
--POPULATE PROPERTY ADDRESS DATA (PARCELID is associated with an Address, so if two rows have the same parcelid and one of those rows has a NULL address, we can assume that the address is the same as the other row)

        SELECT * FROM NashvilleHousing 
        ORDER BY ParcelID;

        SELECT * FROM NashvilleHousing WHERE PropertyAddress IS NULL;

        SELECT a.ParcelID, a.PropertyAddress, b.ParcelID, b.PropertyAddress, IFNULL(a.PropertyAddress, b.PropertyAddress) FROM NashvilleHousing a
        JOIN NashvilleHousing b ON a.ParcelID = b.ParcelID AND a.[UniqueID ] != b.[UniqueID ]
        WHERE a.PropertyAddress IS NULL;

        UPDATE NashvilleHousing AS a
        SET PropertyAddress = b.PropertyAddress FROM NashvilleHousing AS b WHERE b.ParcelID = a.ParcelID AND a.PropertyAddress IS NULL AND b.PropertyAddress IS NOT NULL;

        SELECT * FROM NashvilleHousing;
        
        

--BREAKING OUT ADDRESS INTO INDIVIDUAL COLUMNS (Address, City, State)

        SELECT PropertyAddress FROM NashvilleHousing;

        SELECT SUBSTRING(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1) AS Address,
        SUBSTRING(PropertyAddress, INSTR(PropertyAddress, ',')+ 1) AS City
         FROM NashvilleHousing;

        ALTER TABLE NashvilleHousing
        ADD PropertySplitAddress NVARCHAR(255);

        UPDATE NashvilleHousing
        SET PropertySplitAddress = SUBSTRING(PropertyAddress, 1, INSTR(PropertyAddress, ',') - 1); 

        ALTER TABLE NashvilleHousing
        ADD PropertySplitCity NVARCHAR(255);

        UPDATE NashvilleHousing
        SET PropertySplitCity = SUBSTRING(PropertyAddress, INSTR(PropertyAddress, ',')+ 1;

        SELECT LTRIM(OwnerAddress, SUBSTRING(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1)) FROM NashvilleHousing;

        ALTER TABLE NashvilleHousing
        ADD OwnerCityState;

        UPDATE NashvilleHousing
        SET OwnerCityState = LTRIM(OwnerAddress, SUBSTRING(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1));

        SELECT * FROM NashvilleHousing;

        SELECT OwnerCityState, LTRIM(OwnerCityState, ',') FROM NashvilleHousing;

        UPDATE NashvilleHousing
        SET OwnerCityState = LTRIM(OwnerCityState, ',');

        SELECT OwnerCityState FROM NashvilleHousing;

        ALTER TABLE NashvilleHousing
        ADD OwnerSplitAddress;

        UPDATE NashvilleHousing
        SET OwnerSplitAddress = SUBSTRING(OwnerAddress, 1, INSTR(OwnerAddress, ',') - 1);

        ALTER TABLE NashvilleHousing
        ADD OwnerSplitCity;

        UPDATE NashvilleHousing
        SET OwnerSplitCity = SUBSTRING(OwnerCityState, 1, INSTR(OwnerCityState, ',') - 1);

        ALTER TABLE NashvilleHousing
        ADD OwnerSplitState;

        UPDATE NashvilleHousing
        SET OwnerSplitState = SUBSTRING(OwnerCityState, INSTR(OwnerCityState, ',') + 1);

        SELECT * FROM NashvilleHousing;

--CHANGE ANY INSTANCES OF Y AND N to Yes and No in "Sold as Vacant" field (to make all instances Yes and No)

        SELECT DISTINCT(SoldAsVacant), COUNT(SoldAsVacant) 
        FROM NashvilleHousing
        GROUP BY SoldAsVacant
        ORDER BY 2;

        SELECT SoldAsVacant, CASE
        WHEN SoldAsVacant = 'Y' THEN 'Yes'
        WHEN SoldAsVacant = 'N' THEN 'No'
        ELSE SoldAsVacant
        END AS SoldAsVacantUpdated 
        FROM NashvilleHousing;

        UPDATE NashvilleHousing
        SET SoldAsVacant = CASE
        WHEN SoldAsVacant = 'Y' THEN 'Yes'
        WHEN SoldAsVacant = 'N' THEN 'No'
        ELSE SoldAsVacant
        END;

        SELECT SoldAsVacant, COUNT(SoldAsVacant) FROM NashvilleHousing
        GROUP BY SoldAsVacant;

--REMOVE DUPLICATES (SQLITE DOES NOT SUPPORT DELETING FROM A CTE, THE COMMENTED OUT CODE BELOW WOULD WORK IN OTHER SQL SOFTWARES, BUT SQLLITE VERSION ALSO INCLUDED BELOW)

     --CTE VERSION BELOW (SUPPORTED BY OTHER SQL SOFTWARES)
         /*
            WITH RowNumCTE AS (
            SELECT *, ROW_NUMBER() OVER (PARTITION BY ParcelID, PropertyAddress, SalePrice, SaleDate, LegalReference
            ORDER BY [UniqueID ]) row_num FROM NashvilleHousing
            ORDER BY ParcelID
            )
         /*
            DELETE FROM RowNumCTE
            WHERE row_num > 1;

     --SQLITE SUPPORTED VERSION BELOW
        ALTER TABLE NashvilleHousing
        ADD RowNum INT;

        UPDATE NashvilleHousing
        SET RowNum = (rowid);

        DELETE FROM NashvilleHousing WHERE NashvilleHousing.[UniqueID ] IN (SELECT NashvilleHousing.[UniqueID ] FROM NashvilleHousing 
        JOIN NashvilleHousing a ON a.ParcelID = NashvilleHousing.ParcelID
          AND a.PropertyAddress = NashvilleHousing.PropertyAddress
          AND a.SalePrice = NashvilleHousing.SalePrice
          AND a.SaleDate = NashvilleHousing.SaleDate 
          AND a.LegalReference = NashvilleHousing.LegalReference
          AND a.RowNum > NashvilleHousing.RowNum
          );

        SELECT * FROM NashvilleHousing;

--DELETE UNUSED COLUMNS

        ALTER TABLE NashvilleHousing
        DROP COLUMN OwnerAddress;

        ALTER TABLE NashvilleHousing
        DROP COLUMN PropertyAddress;

        ALTER TABLE NashvilleHousing
        DROP COLUMN OwnerCityState;

        ALTER TABLE NashvilleHousing
        DROP COLUMN TaxDistrict;

        ALTER TABLE NashvilleHousing
        DROP COLUMN SaleDate;

â€¨
